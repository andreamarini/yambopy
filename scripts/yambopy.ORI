#!/usr/bin/env python
from yambopy import *
import argparse
import sys

class Cmd():
    """
    Define some generic functions for a command
    """
    def info(self):
        """
        display the available commands
        """
        print('yambopy')
        print('Available commands are:\n')
        for cmd,c in list(self._commands.items()):
            print("%15s -> %s"%(cmd, c.__doc__.split('\n')[1]))
    
    def run(self,cmds,args):
        """
        generic run command
        cmds is a dictionary that maps the command to the funciton to run
        """
        cmd = args[0]
        if cmd in list(cmds.keys()):
            cmds[cmd](args[1:])

class PlotExcitons(Cmd):
    """
    Plot excitons calculation
        
        possible arguments are:
        
        Arguments:
        filename -> json file containing the absorption spectra. Default: 'absorptionspectra.json' 
        -s       -> Size of the materis in the plot
    """
    def __init__(self,args):
        import matplotlib

        #check for args
        if len(args) < 1:
            print((self.__doc__))
            exit(0)

        parser = argparse.ArgumentParser(description='Study convergence on BS calculations using ypp calls.')
        pa = parser.add_argument
        pa('filename',     help='json file containing the absorption spectra. Default: \'absorptionspectra.json\'' )
        pa('-s','--size',  help='Size of the markers in the plot', default=20, type=int)
        args = parser.parse_args(args)

        if os.path.isfile(args.filename):
            #create plot
            plot_excitons(args.filename,size=args.size) 
        else:
            print('file %s is invalid'%filename)

class PlotEm1sCmd(Cmd):
    """
    Plot em1s calculation

        possible arguments are:
        
        Arguments:
        folders        -> Folders containing the ndb.ems1 files
        -w, --write    -> Write data file in a text file
        -p, --plot     -> Save a file with the plot
        -v, --verbose  -> Print which files are not folder
        --fontsize     -> Choose the font size of the plot
    """
    def __init__(self,args):
        import matplotlib

        #check for args
        if len(args) < 1:
            print((self.__doc__))
            exit(0)

        parser = argparse.ArgumentParser(description='Plot em1s calculation.')
        pa = parser.add_argument
        pa('folders',        nargs='+', help='json file containing the absorption spectra. Default: \'absorptionspectra.json\'' )
        pa('-w','--write',   help='Write data file in a text file', default='em1s.dat', type=str)
        pa('-p','--plot',    help='Save a file with the plot', default='em1s.pdf', type=str)
        pa('-v','--verbose', help='Print which files are not folder', action='store_true')
        pa('--fontsize',     help='Choose the font size of the plot', default=10, type=int)
        args = parser.parse_args(args)
        folders = args.folders
       
        #create plot
        fig = plt.figure(figsize=(6,5))
        matplotlib.rcParams.update({'font.size': args.fontsize})
        ax = plt.gca()

        epsilons = []
        for folder in folders: 
            if os.path.isdir(folder) and os.path.isfile("%s/ndb.em1s"%folder):
                ys = YamboStaticScreeningDB(save=folder)
                #plot epsilon_{00} = [1/(1+vX)]_{00}
                ys.plot(ax,marker='o',markersize=2,label=folder)
                #get epsilon^{-1}_{00} = [1+vX]_{00}
                x,vX = ys._getvxq()
                epsilons.append([folder,x,1+vX])
            else:
                if args.verbose:
                    print("path %s is not a folder"%folder)

        if args.write:
            #write a text file with the data
            f=open(args.write,'w')
            f.write('# Real and imaginary part of \epsilon^{-1}_{00}(\omega=0,q) = [1+vX]_{00} as a funciton of |q|')
            for folder,x,y in epsilons:
                f.write('#%s\n'%folder)
                for xi,yi in zip(x,y):
                    f.write("%12.8lf %12.8lf %12.8lf\n"%(xi,yi.real,yi.imag))
                f.write('\n\n')
            f.close()

        plt.legend(frameon=False)
        plt.tight_layout()

        #final plot
        if args.write: plt.savefig(args.plot) 
        plt.show()

class AnalyseGWCmd(Cmd):
    """
    Study the convergence of GW calculations by looking at the change in band-gap value.

    The script reads from <folder> all results from <variable> calculations and display them.

    Use the band and k-point options according to the size of your k-grid
    and the location of the band extrema.

        Mandatory arguments are:
            folder   -> Folder containing SAVE and convergence runs.
            var      -> Variable tested (e.g. FFTGvecs)

        Optional variables are:
            -bc, --bandc   (int)  -> Lowest conduction band number
            -kc, --kpointc (int)  -> k-point index for conduction band
            -bv, --bandv   (int)  -> Highest valence band number
            -kv, --kpointv (int)  -> k-point index for valence band
            -np, --nopack  (flag) -> Do not call 'pack_files_in_folder'
            -nt, --notext  (flag) -> Do not print a text file
            -nd, --nodraw  (flag) -> Do not draw (plot) the result
    """

    def __init__(self,args):

        #check for args
        if len(args) <= 1:
            print((self.__doc__))
            exit(0)

        #all the other arguments are passed to the analysegw function

        parser = argparse.ArgumentParser(description='Study GW convergence with regards to the band-gap value.')
        pa = parser.add_argument
        pa('folder'            , help='Folder containing SAVE and convergence runs.')
        pa('variable'          , help='Variable tested (e.g. FFTGvecs)' )
        pa('-bc','--bandc'     , help='Lowest conduction band number'    , default=53, type=int)
        pa('-kc','--kpointc'   , help='K-point index for conduction band', default=19, type=int)
        pa('-bv','--bandv'     , help='Highest valence band number'      , default=52, type=int)
        pa('-kv','--kpointv'   , help='K-point index for valence band'   , default=1 , type=int)
        pa('-np','--no-pack'   , help='Skip the packing of output files'        , dest='pack', action='store_false')
        pa('-nt','--no-text'   , help='Skip the writing of the analysis result' , dest='text', action='store_false')
        pa('-nd','--no-draw'   , help='Skip the plotting of the analysis result', dest='draw', action='store_false')
        pa('-v', '--verbose'   , action='store_false')
        parser.set_defaults(pack=True,text=True,draw=True)
        args = parser.parse_args(args)

        folder = args.folder ; var     = args.variable
        bandc  = args.bandc  ; kpointc = args.kpointc
        bandv  = args.bandv  ; kpointv = args.kpointv
        pack   = args.pack   ; text    = args.text
        draw   = args.draw   ; verbose = args.verbose
        
        #call analyse_gw from recipes.py
        analyse_gw(folder,var,bandc,kpointc,bandv,kpointv,pack,text,draw,verbose)

    def info(self):
        """
        display help to use this command
        """
        print(self.__doc__)

class AnalyseBSECmd(Cmd):
    """
    Using ypp, you can study the convergence of BSE calculations in 2 ways:
      Create a .png of all absorption spectra relevant to the variable you study
      Look at the eigenvalues of the first n "bright" excitons (given a threshold intensity)

    The script reads from <folder> all results from <variable> calculations for processing.
    The resulting pictures and data files are saved in the ./analyse_bse/ folder.

    Mandatory arguments are:
        folder   -> Folder containing SAVE and convergence runs.
        var      -> Variable tested (e.g. FFTGvecs)

    Optional arguments are:
        -ne,--numbexc  (int)   -> Number of excitons to read beyond threshold (default=2)
        -ie,--intexc   (float) -> Minimum intensity for excitons to be considered bright (default=0.05)
        -de,--degenexc (float) -> Energy threshold under which different peaks are merged (eV) (default=0.01)
        -me,--maxexc   (float) -> Energy threshold after which excitons are not read anymore (eV) (default=8.0)
        -np,--nopack   (flag)  -> Skips packing o- files into .json files
        -nt,--notext   (flag)  -> Skips writing the .dat file
        -nd,--nodraw   (flag)  -> Skips drawing (plotting) the abs spectra
    """
    def __init__(self,args):
        #check for args
        if len(args) < 2:
            print((self.__doc__))
            exit(0)

        parser = argparse.ArgumentParser(description='Study convergence on BS calculations using ypp calls.')
        pa = parser.add_argument
        pa('folder',           help='Folder containing SAVE and convergence runs.' )
        pa('variable',         help='Variable tested (e.g. FFTGvecs)' )
        pa('-ne','--numbexc',  help='Number of excitons to read beyond threshold', default=2,type=int)
        pa('-ie','--intexc',   help='Minimum intensity for excitons to be considered bright', default=0.05,type=float)
        pa('-de','--degenexc', help='Energy threshold under which different peaks are merged (eV)', default=0.01,type=float)
        pa('-me','--maxexc',   help='Energy threshold after which excitons are not read anymore (eV)', default=8.0,type=float)
        pa('-nt','--notext',   help='Skips writing the .dat file', action='store_false')
        pa('-nd','--nodraw',   help='Skips drawing (plotting) the abs spectra', action='store_false')
        args = parser.parse_args(args)

        folder    = args.folder
        var       = args.variable
        exc_n     = args.numbexc
        exc_int   = args.intexc
        exc_degen = args.degenexc
        exc_max_E = args.maxexc
        text      = args.notext
        draw      = args.nodraw

        #all the other arguments are passed to the analyse bse function
        analyse_bse( folder, var, exc_n, exc_int, exc_degen, exc_max_E, 
                     text=text, draw=draw )

class TestCmd(Cmd):
    """
    Run yambopy tests
    
        possible arguments are:

        basic -> fast test where input/output is compared with reference files
        full  -> requires yambo and quantum espresso to be installed
    """
    
    def __init__(self,args):
        #check for args
        if len(args) < 1:
            print((self.__doc__))
            exit(0)

        cmds = {'basic':self.basic,
                'full':self.full}
        self.run(cmds,args)

    def basic(self,*args):
        os.system('py.test --cov-config=.coveragerc --cov')
        
    def full(self,*args):
        print(args)
    

class MergeQPCmd(Cmd):
    """
    Merge QP databases
    
        possible arguments are:

           <QP files>    -> list of QP files produced by yambo
        -o <output file> -> output file where to save the merged db
    """

    def __init__(self,args):
        """ 
        possible arguments are:
        """ 
        #check for args
        if len(args) <= 1:
            print((self.__doc__))
            exit(0)
        
        #all the other arguments are passed to the merge_qp function
        parser = argparse.ArgumentParser(description='Join different NetCDF quasi-particle databases')
        parser.add_argument('files', nargs='+', type=argparse.FileType('r'))
        parser.add_argument('-o','--output',                       help='Output filename', default='ndb_out.QP')
        parser.add_argument('-v','--verbose', action="store_true", help='Verbose mode')
        args = parser.parse_args(args)

        output  = args.output
        files   = args.files
        verbose = args.verbose
        
        #call merge_qp from recipes.py
        merge_qp(output,files,verbose)

    def info(self):
        """
        display help to use this command 
        """
        print(self.__doc__)


class AddQPCmd(Cmd):
    """
    Add corrections from QP databases.
    This function reads the QP correction from Yambo databases and add them together. Pass a list of files (separated by a space) after each flag to get the total correction you need.
    The k-grid must be the same, the number of bands can be different. There will always be at least the LDA value. The Z factor is taken as one.

    Optional arguments are:

        -a,  --add       -> Add the real-part of a QP correction
        -s,  --substract -> Substract the real-part of a QP correction
        -ai, --addimg    -> Add the imaginary-part of a QP correction
        -o,  --output    -> Output filename
        -v,  --verbose   -> Increased verbosity

    """

    def __init__(self,args):
        #check for args
        if len(args) <= 1:
            print((self.__doc__))
            exit(0)

        parser = argparse.ArgumentParser(description='Join different NetCDF quasi-particle databases')
        parser.add_argument('-a', '--add',       nargs='+', type=argparse.FileType('r'), help="Add the real part to the final db",default=[])
        parser.add_argument('-s', '--substract', nargs='+', type=argparse.FileType('r'), help="Substract the real part to the final db", default=[])
        parser.add_argument('-ai','--addimg',    nargs='+', type=argparse.FileType('r'), help="Add the imaginary part to the final db",default=[])
        parser.add_argument('-o', '--output',  default='ndb_out.QP', help='Output filename')
        parser.add_argument('-v', '--verbose', action="store_true",  help='Verbose mode')
        args = parser.parse_args(args)


        output  = args.output
        add     = args.add
        substract = args.substract
        addimg  = args.addimg
        verbose = args.verbose


        #call add_qp from recipes.py
        add_qp(output,add,substract,addimg,verbose)

    def info(self):
        """
        display help
        """
        print(self.__doc__)


class YambopyCmd(Cmd):
    """
    class to implement commands for yambopy.
    each new command to be added should be implemented as a class inheriting from this one
    """
    _commands = {'plotem1s':     PlotEm1sCmd,
                 'analysebse':   AnalyseBSECmd,
                 'analysegw':    AnalyseGWCmd,
                 'plotexcitons': PlotExcitons,
                 'addqp':        AddQPCmd,
                 'mergeqp':      MergeQPCmd,
                 'test':         TestCmd}

    def __init__(self,*args):
        """
        parse the command from the command line and initialize the class responsible
        for handling such command
        """
        
        #check for args
        if len(args) <= 1:
            self.info()
            exit(0)
 
        #start call graph     
        if args[1] in self._commands:
            cmdclass = self._commands[args[1]]
            self.cmd = cmdclass(args[2:]) 
        else:
            self.info()  
            print() 
            print("Command %s is not known to yambopy"%args[1])
 
#parse options
ycmd = YambopyCmd(*sys.argv)
