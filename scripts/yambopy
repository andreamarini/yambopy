#!/usr/bin/env python
#
#       Copyright (C) 2018-2019 the YAMBOpy team
#      https://github.com/henriquemiranda/yambopy
#
# Authors (see AUTHORS file for details): HM AM
# 
# This file is distributed under the terms of the GNU 
# General Public License. You can redistribute it and/or 
# modify it under the terms of the GNU General Public 
# License as published by the Free Software Foundation; 
# either version 2, or (at your option) any later version.
#
# This program is distributed in the hope that it will 
# be useful, but WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A 
# PARTICULAR PURPOSE.  See the GNU General Public License 
# for more details.
#
# You should have received a copy of the GNU General Public 
# License along with this program; if not, write to the Free 
# Software Foundation, Inc., 59 Temple Place - Suite 330,Boston, 
# MA 02111-1307, USA or visit http://www.gnu.org/copyleft/gpl.txt.
#
#from yambopy import *
#from yambopy.gs import gs
from qepy.data.list_the_materials import list_the_materials
from qepy.gs.scf import scf
import argparse
import sys

class Cmd():
    """
    Define some generic functions for a command
    """
    def info(self):
        """
        display the available commands
        """
        print('\nThis is yambopy\n')
        print('Available Environments are:\n')
        for cmd,c in self._commands.items():
            print "%15s -> %s"%(cmd, c.__doc__.split('\n')[1])
        print('\n')
    
    def run(self,cmds,args):
        """
        generic run command
        cmds is a dictionary that maps the command to the funciton to run
        """
        cmd = args[0]
        if cmd in cmds.keys():
            cmds[cmd](args[1:])

class pw(Cmd):
    """
    Driver to pw calculations
    """
    def __init__(self,args):

        parser = argparse.ArgumentParser(description='pw operations')
        pa = parser.add_argument
        pa('material',         help='Material' )
	pa('-r' ,'--relax',      action="store_true", help='relaxation')
	pa('-s' ,'--scf',        action="store_true", help='scf')
	pa('-n' ,'--nscf',       action="store_true", help='nscf')
	pa('-b' ,'--bands',      action="store_true", help='bands')

        #check for args
        if len(args) < 2:
            print(self.__doc__)
            parser.print_help()
            list_the_materials()
            exit(0)
        #
        args = parser.parse_args(args)
        #
        print "Material :",args.material
        print "SCF      :",args.scf
        print "Relax    :",args.relax
        print "Bands    :",args.bands
        #folder    = args.folder
        #var       = args.variable
        #exc_n     = args.numbexc
        #exc_int   = args.intexc
        #exc_degen = args.degenexc
        #exc_max_E = args.maxexc
        #pack      = args.nopack
        #text      = args.notext
        #draw      = args.nodraw
	if args.relax:
         relax()
	if args.scf:
         print("Calling scf:")
     	 scf(args.material)
     	 #pack_files_in_folder()
	#if args.nscf:
    	 #nscf()
	#if args.bands:
    	 #bands()

class YambopyCmd(Cmd):
    """
    class to implement commands for yambopy.
    each new command to be added should be implemented as a class inheriting from this one
    """
    _commands = {'pw':           pw}

    def __init__(self,*args):
        """
        parse the command from the command line and initialize the class responsible
        for handling such command
        """
        
        #check for args
        if len(args) <= 1:
            self.info()
            exit(0)
 
        #start call graph     
        if args[1] in self._commands:
            cmdclass = self._commands[args[1]]
            self.cmd = cmdclass(args[2:]) 
        else:
            self.info()  
            print 
            print "Command %s is not known to yambopy"%args[1]
 
#parse options
ycmd = YambopyCmd(*sys.argv)
